def projectName = "ud-iam-service" 
def buildStartTime = new Date().format('dd/MM/yyyy HH:mm:ss')
def deploymentBucket = ""
def securityGroupId = ""
def subnetIdA = ""
def subnetIdB = ""
def deployerRoleArn = ""
def deploymentRoleArn = ""
def executionRoleArn = ""
def apiGatewayId = ""
def rootResourceId = ""
def nodeEnvironment = ""
def secretStore = ""
def secretRegion = ""
def secretTimeOut = ""
def branch = ""

pipeline {
  agent {
    kubernetes {
      cloud 'ud-dev-tm'
      inheritFrom 'serverless'
      defaultContainer 'jenkins-slave'
    }
  }
  environment {
    ENV = "${params.environment}"
  }
  stages {
        stage('Initialize Variables') {
            steps {
              script {
                if (params.environment == "dev") {
                    roleAccount = '304062277670'
                    deploymentBucket = "ud-dev-idaas-iam-deployment-bucket"
                    securityGroupId = "sg-01fca2b05e9cf804a"
                    subnetIdA = "subnet-071d773e13a8fffb5"
                    subnetIdB = "subnet-09cf826969486c056"
                    deployerRoleArn = "arn:aws:iam::304062277670:role/idaas-iam-dev-deployer"
                    deploymentRoleArn = "arn:aws:iam::304062277670:role/idaas-iam-dev-deployment"
                    executionRoleArn = "arn:aws:iam::304062277670:role/idaas-iam-dev-execution"
                    apiGatewayId = "ur86o1vma5"
                    rootResourceId = "uai09713e5"
                    environmentName = "development"
                } else if (params.environment == "uat") {
                    roleAccount = '229510487219'
                    deploymentBucket = "ud-uat-idaas-iam-deployment-bucket"
                    securityGroupId = "sg-0f320394177a9f34a"
                    subnetIdA = "subnet-088e921d1935359c0"
                    subnetIdB = "subnet-0d0bc836fce916d52"
                    deployerRoleArn = "arn:aws:iam::229510487219:role/idaas-iam-uat-deployer"
                    deploymentRoleArn = "arn:aws:iam::229510487219:role/idaas-iam-uat-deployment"
                    executionRoleArn = "arn:aws:iam::229510487219:role/idaas-iam-uat-execution"
                    apiGatewayId = "iebmn4yw37"
                    rootResourceId = "sh8w9mugz0"
                    environmentName = "staging"
                } else if (params.environment == "prod") {
                    roleAccount = "823056061745"
                    deploymentBucket = "ud-prod-idaas-iam-deployment-bucket"
                    securityGroupId = "sg-05b4a4c4abb0b767d"
                    subnetIdA = "subnet-0f790eb87a4699a53"
                    subnetIdB = "subnet-0e954813726abcd46"
                    subnetIdC = "subnet-07d02194b229c79cc"
                    deployerRoleArn = "arn:aws:iam::823056061745:role/idaas-iam-prod-deployer"
                    deploymentRoleArn = "arn:aws:iam::823056061745:role/idaas-iam-prod-deployment"
                    executionRoleArn = "arn:aws:iam::823056061745:role/idaas-iam-prod-execution"
                    apiGatewayId = "ywm4z18vol"
                    rootResourceId = "jjogr3gkwc"
                    environmentName = "production"
                } else {
                    hubotSend message: "ERROR: Project environment ${params.environment} is not available.!", status: 'FAILURE'
                    error "Pipeline aborted due to no environment ${params.environment} available"
                }
              }
            }
        }
        stage('Install Packages'){
           steps {
               script {
                    dir("${Workspace}/"){
                        sh """
                            npm install
                        """
                        hubotSend message: "Successfully installed ${projectName}-${ENV} packages. :sunny:", tokens: "BUILD_NUMBER,BUILD_ID", status: 'SUCCESS'
                    }
               }  
           }
        }
        stage('Sonar Analysis'){
           steps {
               script {
                    def scannerHome = tool 'UD_Sonar';
                    withSonarQubeEnv('UD IDaaS Sonarqube') { 
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -D sonar.projectKey=${projectName}-${ENV} \
                            -D sonar.projectBaseDir=${Workspace} \
                            -D sonar.sources=. \
                            -D sonar.inclusions=**
                        """
                    }
               }  
           }
        }
        stage('Sonar Quality Gate') {            
          steps {
              script{
                  timeout(time: 1, unit: 'HOURS') {
                      def qg = waitForQualityGate()
                      if (qg.status != 'OK') {
                          hubotSend message: "${qg.status}: Quality Gate Failure", status: 'FAILURE'
                          hubotSend message: "This will fail the pipeline soon. Proceeding for now..."
                      }
                  }
                  hubotSend message: "Successfully passed Sonar Quality Gate... :sunny:", tokens: "BUILD_NUMBER,BUILD_ID", status: 'SUCCESS'
              }
          }
        }
        stage('Deploy') { 
            steps {
                echo "${buildStartTime}"
                script {
                    withAWS(
                        roleAccount:"${roleAccount}", 
                        role:"${deployerRoleArn}"
                        ) {
                        withEnv([
                            "DEPLOYMENT_ROLE=${deploymentRoleArn}",
                            "DEPLOYMENT_BUCKET=${deploymentBucket}",
                            "SUBNET_ID_A=${subnetIdA}",
                            "SUBNET_ID_B=${subnetIdB}",
                            "SECURITY_GROUP_ID=${securityGroupId}",
                            "EXECUTION_ROLE=${executionRoleArn}",
                            "API_GATEWAY_ID=${apiGatewayId}",
                            "ROOT_RESOURCE_ID=${rootResourceId}",
                            "NODE_ENV=${environmentName}"
                        ]) {
                        sh """
                            sls deploy -s ${ENV}
                        """
                        }
                    hubotSend message: "Successfully deployed ${projectName}-${ENV} serverless lambda. :sunny:", tokens: "BUILD_NUMBER,BUILD_ID", status: 'SUCCESS'
                    }   
                }
            }
        }
    }
    post { 
        always { 
            echo 'Add scripts here'
        }
    }
}